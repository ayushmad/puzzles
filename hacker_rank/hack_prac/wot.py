import sys



def best_margin(days, stock_price):
    """
        best_margin(number_of_days, sock_price_of_each_day);

        Given a set of stock prices over the next N days 
        calculates maximum value that can be generated by selling the stocks.
    """
    # We hash the money spent if we buy all the stocks till this day
    total_cost = 0;
    day_count = 0;
    stock_buy_list = [];
    days_cost_tuple = [];
    for cost in stock_price:
        total_cost += cost;
        stock_buy_list.append(total_cost);
        days_cost_tuple.append((day_count, cost));
        day_count += 1;
    days_cost_tuple.sort(key = lambda x: x[1], reverse = True);

    # Calculating profit
    last_sell_date = 0;
    profit = 0;
    for (day, cost) in days_cost_tuple:
        if day <= last_sell_date:
            continue;
        elif  last_sell_date == day:
            last_sell_date = day + 1;
            continue;
        else:
            money_spent_buying = stock_buy_list[day-1] - stock_buy_list[last_sell_date];
            money_gained_selling = cost * int(day - last_sell_date);
            if money_spent_buying > money_gained_selling:
                continue;
            else:
                profit += (money_gained_selling - money_spent_buying);
                last_sell_date = day + 1;
            if last_sell_date == len(stock_buy_list) - 1:
                break;
    return profit;





if __name__ == "__main__":
    test_case_count = int(raw_input());
    while test_case_count > 0:
        days = int(raw_input());
        stock_price = map(int, raw_input().split());
        print best_margin(days, stock_price);
        test_case_count -= 1;
